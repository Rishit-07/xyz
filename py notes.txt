case sensitive language..
no semicolons needed..

a variable can be declared by var_name = value either 0/1 or anything else

input cmd:input("...")
input cmd with int : int(input("...))
print stmt:print("")
print the  var declared: print(var_name)
if stmt: if var_name rel_fn value 
         print("stmt"/var_name)
else stmt: else :
           print("stmt"/var_name)
else if in python is known as elif 

RELATIONAL OPERATIORS :
 == -- equal to,
 != -- not equal to,
 > -- greater than,
 < -- leaa than,
 >= -- greater than or equal to,
 <= -- leaa than or equal to....
 
 
random is a fn to generate a random number from the given range
the random fn is declared with .randint() and it should be imported with an import stmt 
i.e import random
after importing stmg proper spacing is a must

range fn :- it displays the wanted data for the specified amount of time 
the fn is for i in range(value)
print("displayed _text")

list fn:- It is used to store multiple items in a single variable
syntax:- list_name = [item1 , item2 , item3]
More facts about lists:
List items allow duplicate values.
Lists can have values with different data types.
There's no limit to how much data a list can hold.

In lists also the subscript is 0 just like the c++ array ... therefore to print an individual variable 
The syntax is :- print(name[index])
eg:- print(vowel[0])

Slicing:- Slicing is where we can access certain parts of a sequence.

Instead of accessing an item using a single index like name[index], we can get multiple items by specifying where to start and where to end the range like name[start : end].

For example:
vowels = ['a', 'e', 'i', 'o', 'u']

print(vowels[0 : 3])
print(vowels[1 : 3])

# Output:
# ['a', 'e', 'i']
# ['e', 'i']
It starts from the start index (inclusive) and ends before the end index (non-inclusive).
So in the above example, print(vowels[1 : 3]) only returned items at indices 1 and 2, and didn't include index 3.

You can think of the while loop like a traffic circle.
Each lap is one iteration! A car will iterate over and over again until it can't do so anymore.

BUILT-IN FN's:-
len():-  describes the length of the list
max():- describes the max val of the list
min():- describes the min val of the list
.append()	Add an item to the end of the list
.clear()	Remove all items from the list
.copy()	Return a shallow copy of the list
.count()	Return the number of times the value appears in the list
.extend()	Appends another list to the current list by extending it
.index()	Returns the index of a value inside the list
.insert()	Insert an item at a specified position in the list
.pop()	Remove an item from a specified position in the list
.remove()	Remove an item from the list based on the value of the item
.reverse()	Reverses the list in place
.sort()	Sorts the list in place
eg:- dna = ['AUG', 'AUC', 'UCG']

dna.append('UAA')     # ['AUG', 'AUC', 'UCG', 'UAA']
dna.insert(2, 'GAU')  # ['AUG', 'AUC', 'GAU', 'UCG', 'UAA']
dna.remove('AUC')     # ['AUG', 'GAU', 'UCG', 'UAA']
dna.pop(0)            # ['GAU', 'UCG', 'UAA']

class in python is same as the one in C++
but string should be enclosed in ''
int no need of ''
boolean just type it up
syntax :- class class_name:
U can also specify a class to one thing or variable 
ex:- 
ferris.student_id = 10837
ferris.name = 'Ferris Bueller'
ferris.year = 12
ferris.gpa = 3.81
ferris.enrolled = True

and this details can be printed using a built in fn vars***
syntax:- print(vars(ferris))***

_init_() fn:-
Using __init__() in our class definition lets us construct objects with unique attributes.
When we create a new Student() object, we can pass in values for each attribute to initialize the new object, all in a single line!

So if we reformat our Student class with __init__():
eg:- class Student: 
  def __init__(self, name, year, gpa, enrolled):        #init has a double underscores
    self.name = name
    self.year = year
    self.gpa = gpa
    self.enrolled = enrolled

daniel = Student('Daniel Li', 10, 4.0, True)
Note that __init__() also uses a separate parameter called self. This represents the object we'll create out of Student().
*** We need to include self whenever we want to use __init__(). It's always the first parameter.

MODULE:- a module contains statements, functions, and class definitions that revolve around a similar purpose.
few modules are :-
1)random :- It generates a random number
2)math :- It finds the square root of the number
3)datetime :- to work with date and time
	syntax :- datetime.date(year,month,day)
and,	datetime = date.today() , gives the present date 

tuple:-
Lists and tuples have a few things in common:

They can store multiple items in a single variable.
Their values are separated by commas.
However, tuples use a different syntax:

tuple_example = (1, '2', True)
navy_blue = (0, 0, 128)

tuples are only valid with commas:
		# valid tuple
		t1 = ('a',)
		# valid tuple
		t2 = 'a',
		# NOT a tuple
		t3 = ('a')
			
Dictionary Data Structure: {key : value}
dictionary = {
              key1 : value,
			  key2 : value,
			  key3 : value,
			 }
			 
Dictionaries come equipped with various methods to streamline common tasks. This includes .keys(), .values(), and items():
# Dictionary methods
print('Keys:', student_info.keys())
print('Values:', student_info.values())
print('Items:', student_info.items())

This prints the following:

Keys: dict_keys(['name', 'age', 'grade'])
Values: dict_values(['Alice', 9, 'A'])
Items: dict_items([('name', 'Alice'), ('age', 9), ('grade', 'A')])

.keys() returns just the keys from a dictionary.
.values() returns just the values.
.items() returns a list of the key-value pairs as tuples.

SETS:- It is the ordered collection of elements where sequence is not important
The SYNTAX of sets is set_name = {value1,value2,value3,..}
EXAMPLE:- 
     car_name = {bugatti,audi,nissan,skoda,honda,ferrari,tata}
#Using of Sets : - 
		set1 = {1,2,3,4,5}
		set2 = {2,3,4,5,6,7}
		
#Union of the rwo sets:
		union_set = set1.union(set2)
#Intersection of set:
		intersect_set = set1.intersection(set2)
#Difference of the two sets:
		difference_Set = set1.difference(set2)
#Printing of Sets:
		print(union_set)
		print(intersect_set)
		print(difference_Set)
		
#THERE ARE MORE WAYS OF REMOVING OR ADDING A VALUE INTO THE SET:
example:- 
		my_set = {1,2,3,4,5}
		my_set.add(6)
		print(my_set)
#output will be : {1,2,3,4,5,6}
		my_set.remove = (1)
		print(my_set)
#output will be : {2,3,4,5,6}


ALL THE THREE DATA STRUCTURES IN ONE PLACE:- 
# Tuple
teams = ('TeamA', 'TeamB')

# Dictionary
basketball_player = {'name': 'LeBron James', 'team': 'Los Angeles Lakers'}

# Set
soccer_positions = {'Forward', 'Midfielder', 'Defender', 'Goalkeeper'}

FILE HANDLING:-
	open command:- It opens a new file in your computer
SYNTAX :- file=open('file_name','w')   #where the w represents that the file can be written
	writing command:- It allows the user to write data into the txt file
SYNTAX:- file.write('Enter the info to be diplayed inside the created file')
There are three modes you can open a file with:

'r' for reading a file. 📖
'w' for writing to a file. ✍🏼
'a' for writing from the end of a file. 📝

A write function can be done in two ways:
1) file.write ("the information)
2) file.writelines
ex for the second one is as follows:-
lines = [this is a line\n', 'this is another line\n']
file.writelines(lines)

File Cursor:-
The file cursor is necessary for reading or modifying specific parts of the file. Methods like .seek() move the cursor to a desired location within the file.

# Moving the file cursor using seek()
with open('example.txt', 'r') as file:
  file.seek(10)  # Move to the 10th byte
  content = file.read()

The .truncate() method allows us to modify file size. This is useful when we want to remove or reset content beyond a certain point. We can trim or extend the file size as needed.

# Truncating a file
with open('example.txt', 'a') as file:
  file.truncate(20)  # Limit the file size to 20 bytes

